---
import Layout from '../../layouts/Layout.astro'
import { sendEmailVerificationLink } from '../../lib/email';
const pageTitle = "Signup Page"
import { auth } from "../../lib/lucia";
import { generateEmailVerificationToken } from '../../lib/token';
import { validateEmail } from '../../lib/utils';

const errors = { username: "", email: "", password: "", passwordConfirm: ""}


// check for form submissions
if (Astro.request.method === "POST") {
	let errorMessage: string | null = null;

	const formData = await Astro.request.formData();
	const username = formData.get("username") as string;
	const email = formData.get("username") as string;
    const password = formData.get("password") as string;	
    const passwordConfirm = formData.get("passwordConfirm");
	// basic check
    if (typeof username !== "string" || username.length < 3) {
        errors.username += "Please enter a username of at least 3 characters ";
    }
    if (typeof username !== "string" || !validateEmail(username)) {
        errors.email += "Please enter a valid email such as example@domain.com. ";
    }

    if (typeof password !== "string" || password.length < 6) {
        errors.password += "Passwords must be at leat 6 characters long ";
    }
    if (typeof passwordConfirm !== "string" || passwordConfirm !== password) {
        errors.passwordConfirm += "Passwords and confrimation password must macth ";
    }
    const hasErrors = Object.values(errors).some(msg => msg)
	if (!hasErrors) {
		try {
			const user = await auth.createUser({
				key: {
					providerId: "email", // auth method
					providerUserId: email?.toLowerCase(), // unique id when using "username" auth method
					password // hashed by Lucia
				},
				attributes: {
					email,
					email_verified: false,
					username
				}
			});
			const session = await auth.createSession({
				userId: user.userId,
				attributes: {}
			});
			Astro.locals.auth.setSession(session); // set session cookie
			// Send verification token for email validation
			const token = await generateEmailVerificationToken(user.userId)
			await sendEmailVerificationLink(token);
			return Astro.redirect("/auth/profile", 302); // redirect to profile page
		} catch (e) {
			// this part depends on the database you're using
			// check for unique constraint error in user table
			if (
				e 
			) {
				console.error(e)
				errorMessage = "Username already taken";
			} else {
				errorMessage = "An unknown error occurred";
			}
		}
	} else {
		errorMessage = "Invalid input";
	}
}
---

<Layout title={pageTitle}>
    <h1>Sign up</h1>
		<form method="POST">
			<label for="username">Username</label>
			<input type="email" name="username" id="username" placeholder="Your email: user@example.com" /><br />
			<label for="password">Password</label>
			<input type="password" name="password" id="password" /><br />
            <label for="passwordConfirm">Confirm Password</label>
			<input type="password" name="passwordConfirm" id="passwordConfirm" /><br />
			<input type="submit" />
		</form>
        <hr/ >
        <p>
            Already registered ? <a href="/auth/login">Login</a>
        </p>
</Layout>